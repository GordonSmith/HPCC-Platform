package hpcc-systems:hpcc-platform

world hpcc-scalar-test {
/*  imports  ---

    guests dispose all params as needed
    guests should dispose "results" as needed
*/
  import dbglog: func(msg: string)

/*  exports  ---

    guests dispose all params as needed
    hosts call cabi_post_XXX to dispose "results" as needed
*/
  export bool-and-test: func(a: bool, b: bool) -> bool
  export bool-or-test: func(a: bool, b: bool) -> bool
  export float32-test: func(a: float32, b: float32) -> float32
  export float64-test: func(a: float64, b: float64) -> float64
  export u8-test: func(a: u8, b: u8) -> u8
  export u16-test: func(a: u16, b: u16) -> u16
  export u32-test: func(a: u32, b: u32) -> u32
  export u64-test: func(a: u64, b: u64) -> u64
  export s8-test: func(a: s8, b: s8) -> s8
  export s16-test: func(a: s16, b: s16) -> s16
  export s32-test: func(a: s32, b: s32) -> s32
  export s64-test: func(a: s64, b: s64) -> s64

  export utf8-string-test: func(a: string, b: string) -> string

  export list-test-bool: func() -> list<bool>
  export list-bool-test-bool: func(a: list<bool>) -> list<bool>

  export list-test-u32: func() -> list<u32>
  export list-u32-test-u32: func(a: list<u32>) -> list<u32>

  export list-test-float32: func() -> list<float32>
  export list-float32-test-float32: func(a: list<float32>) -> list<float32>

  export list-test-string: func() -> list<string>
  export list-string-test-string: func(a: list<string>) -> list<string>

  export list-test-list: func() -> list<list<string>>
  // export list-list-test-list: func(a: list<list<string>>) -> list<list<string>>
}
