/*##############################################################################

    HPCC SYSTEMS software Copyright (C) 2020 HPCC Systems.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
############################################################################## */

EspInclude(common);

ESPresponse [exceptions_inline, nil_remove] BooleanResponse
{
    bool Result;
};

ESPrequest [nil_remove] SetValueRequest
{
    string Path;
    string Value;
};

ESPresponse [exceptions_inline, nil_remove] ResultResponse
{
    string Result;
};

ESPrequest [nil_remove] GetValueRequest
{
    string Path;
};

ESPrequest [nil_remove] ImportRequest
{
    string XML;
    string Path;
    bool Add;
};

ESPrequest [nil_remove] DeleteRequest
{
    string Path;
};

ESPrequest [nil_remove] AddRequest
{
    string Path;
    string Value;
};

ESPrequest [nil_remove] CountRequest
{
    string Path;
};

ESPresponse [exceptions_inline, nil_remove] CountResponse
{
    unsigned Result;
};

ESPrequest [nil_remove] GetLogicalFileRequest
{
    string FileName;
};

ESPrequest [nil_remove] GetLogicalFilePartRequest
{
    string FileName;
    unsigned PartNumber;
};

ESPrequest [nil_remove] SetLogicalFilePartAttrRequest
{
    string FileName;
    unsigned PartNumber;
    string Attr;
    string Value;
};

ESPrequest [nil_remove]  GetDFSCSVRequest
{
    string LogicalNameMask;
};

ESPrequest [nil_remove]  GetDFSMapRequest
{
    string FileName;
};

ESPrequest [nil_remove]  GetDFSParentsRequest
{
    string FileName;
};

ESPrequest [nil_remove]  DFSCheckRequest
{
};

ESPrequest [nil_remove]  DFSLSRequest
{
    string Name;
    bool PathAndNameOnly(true);
    bool IncludeSubFileInfo(false);
    bool Recursively(false);
};

ESPrequest [nil_remove]  DFSExistsRequest
{
    string FileName;
};

ESPrequest [nil_remove] SetProtectedRequest
{
    string FileName;
    string CallerId;
};

ESPrequest [nil_remove] SetUnprotectedRequest
{
    string FileName;
    string CallerId;
};

ESPrequest [nil_remove] GetProtectedListRequest
{
    string FileName;
    string CallerId;
};

ESPrequest [nil_remove] GetConnectionsRequest
{
};

ESPrequest [nil_remove] GetClientsRequest
{
};

ESPStruct [nil_remove] DaliStatEntry
{
    string Name;
    string Value;
    string Type;
    string Timestamp;
};

ESPStruct [nil_remove] DaliCategoryStats
{
    string Category;
    int64 TotalCount;
    int64 AverageValue;
    int64 MinValue;
    int64 MaxValue;
    string StartTime;
    string EndTime;
    ESParray<ESPstruct DaliStatEntry> StatEntries;
};

ESPStruct [nil_remove] DaliNodeStats
{
    string NodeName;
    string Status;
    int64 ConnectionCount;
    int64 MemoryUsage;
    int64 CpuUsage;
    int64 Uptime;
    ESParray<ESPstruct DaliCategoryStats> Categories;
};

ESPStruct [nil_remove] DaliClusterStats
{
    string ClusterName;
    int64 TotalNodes;
    int64 ActiveNodes;
    int64 TotalConnections;
    int64 TotalMemoryUsage;
    string LastUpdated;
    ESParray<ESPstruct DaliNodeStats> Nodes;
    ESParray<ESPstruct DaliCategoryStats> AggregateStats;
};

ESPStruct [nil_remove] DaliDimension
{
    string Name;
    string Value;
};

ESPrequest [nil_remove] GetGlobalStatsRequest
{
    string Category;
    ESParray<ESPstruct DaliDimension> Dimensions;
    string StartTime;
    string EndTime;
};

ESPresponse [exceptions_inline, nil_remove] GetGlobalStatsResponse
{
    string Summary;
    string CollectionTime;
    int64 TotalDataPoints;
    ESParray<ESPstruct DaliClusterStats> ClusterStats;
    ESParray<ESPstruct DaliCategoryStats> GlobalCategories;
    ESParray<ESPstruct DaliStatEntry> SystemMetrics;
};

ESPrequest [nil_remove] GetSDSStatsRequest
{
};

ESPrequest [nil_remove] GetSDSSubscribersRequest
{
};

ESPrequest [nil_remove] DisconnectClientConnectionRequest
{
    string Endpoint;
};

ESPrequest [nil_remove] ListSDSLocksRequest
{
};

ESPrequest [nil_remove] UnlockSDSLockRequest
{
    string ConnectionID;
    bool Close(false);
};

ESPrequest [nil_remove] SaveSDSStoreRequest
{
};

ESPrequest [nil_remove] SetTraceTransactionsRequest
{
};

ESPrequest [nil_remove] SetTraceSlowTransactionsRequest
{
    unsigned SlowThresholdMS(1000); //default to 1000 ms
};

ESPrequest [nil_remove] ClearTraceTransactionsRequest
{
};

ESPservice [auth_feature("NONE"), //This declares that the method logic handles feature level authorization
    version("1.08"), default_client_version("1.08"), exceptions_inline("./smc_xslt/exceptions.xslt")] WSDali
{
    ESPmethod [min_ver("1.01")] SetValue(SetValueRequest, ResultResponse);
    ESPmethod [min_ver("1.01")] GetValue(GetValueRequest, ResultResponse);
    ESPmethod [min_ver("1.02")] Import(ImportRequest, ResultResponse);
    ESPmethod [min_ver("1.02")] Delete(DeleteRequest, ResultResponse);
    ESPmethod [min_ver("1.03")] Add(AddRequest, ResultResponse);
    ESPmethod [min_ver("1.03")] Count(CountRequest, CountResponse);
    ESPmethod [min_ver("1.04")] GetLogicalFile(GetLogicalFileRequest, ResultResponse);
    ESPmethod [min_ver("1.04")] GetLogicalFilePart(GetLogicalFilePartRequest, ResultResponse);
    ESPmethod [min_ver("1.04")] SetLogicalFilePartAttr(SetLogicalFilePartAttrRequest, ResultResponse);
    ESPmethod [min_ver("1.04")] GetDFSCSV(GetDFSCSVRequest, ResultResponse);
    ESPmethod [min_ver("1.04")] GetDFSMap(GetDFSMapRequest, ResultResponse);
    ESPmethod [min_ver("1.04")] GetDFSParents(GetDFSParentsRequest, ResultResponse);
    ESPmethod [min_ver("1.04")] DFSCheck(DFSCheckRequest, ResultResponse);
    ESPmethod [min_ver("1.04")] DFSLS(DFSLSRequest, ResultResponse);
    ESPmethod [min_ver("1.04")] DFSExists(DFSExistsRequest, BooleanResponse);
    ESPmethod [min_ver("1.04")] SetProtected(SetProtectedRequest, ResultResponse);
    ESPmethod [min_ver("1.04")] SetUnprotected(SetUnprotectedRequest, ResultResponse);
    ESPmethod [min_ver("1.04")] GetProtectedList(GetProtectedListRequest, ResultResponse);
    ESPmethod [min_ver("1.05")] GetConnections(GetConnectionsRequest, ResultResponse);
    ESPmethod [min_ver("1.05")] GetClients(GetClientsRequest, ResultResponse);
    ESPmethod [min_ver("1.08")] GetGlobalStats(GetGlobalStatsRequest, GetGlobalStatsResponse);
    ESPmethod [min_ver("1.05")] GetSDSStats(GetSDSStatsRequest, ResultResponse);
    ESPmethod [min_ver("1.05")] GetSDSSubscribers(GetSDSSubscribersRequest, ResultResponse);
    ESPmethod [min_ver("1.06")] DisconnectClientConnection(DisconnectClientConnectionRequest, ResultResponse);
    ESPmethod [min_ver("1.07")] ListSDSLocks(ListSDSLocksRequest, ResultResponse);
    ESPmethod [min_ver("1.06")] UnlockSDSLock(UnlockSDSLockRequest, ResultResponse);
    ESPmethod [min_ver("1.06")] SaveSDSStore(SaveSDSStoreRequest, ResultResponse);
    ESPmethod [min_ver("1.06")] SetTraceTransactions(SetTraceTransactionsRequest, ResultResponse);
    ESPmethod [min_ver("1.06")] SetTraceSlowTransactions(SetTraceSlowTransactionsRequest, ResultResponse);
    ESPmethod [min_ver("1.06")] ClearTraceTransactions(ClearTraceTransactionsRequest, ResultResponse);
};

SCMexportdef(WSDali);
SCMapi(WSDali) IClientWSDali *createWSDaliClient();