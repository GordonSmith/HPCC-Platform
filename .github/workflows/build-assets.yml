name: Build Assets

env:
  VCPKG_BINARY_SOURCES: "clear;nuget,GitHub,read"
  VCPKG_NUGET_REPOSITORY: "https://github.com/hpcc-systems/vcpkg"

on:
  push:
    tags:
      - "*"
      - "community_*"
      - "!community_8.10.*"
      - "!community_8.8.*"
      - "!community_8.6.*"
      - "!community_8.4.*"
      - "!community_8.2.*"
      - "!community_8.0.*"
      - "!community_7.*"

jobs:
  release:
    name: Publish Release
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Release HPCC-Platform
        uses: ncipollo/release-action@v1.12.0
        with:
          generateReleaseNotes: true
          prerelease: ${{ contains(github.ref, '-rc') }}
      - name: Release LN
        uses: ncipollo/release-action@v1.12.0
        with:
          owner: ${{ secrets.LNB_ACTOR }}
          repo: LN
          token: ${{ secrets.LNB_TOKEN }}
          generateReleaseNotes: true
          prerelease: ${{ contains(github.ref, '-rc') }}


  build-platform:
    name: Build Platform
    needs: release
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            container: true
          - os: ubuntu-22.10
          - os: ubuntu-22.04
          - os: ubuntu-20.04
          - os: ubuntu-18.04
          - os: centos-8
          - os: centos-7
          - os: amazonlinux
          - os: centos-7
            ln: true
      fail-fast: false
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout HPCC-Platform
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          submodules: recursive

      - name: Calculate vars
        id: vars
        run: |
          echo 'mount_platform=source="${{ github.workspace }}",target=/hpcc-dev/HPCC-Platform,type=bind,consistency=cached' >> $GITHUB_OUTPUT
          echo 'mount_ln=source="${{ github.workspace }}/LN",target=/hpcc-dev/LN,type=bind,consistency=cached' >> $GITHUB_OUTPUT
          echo "branch_name=$(echo ${{ github.ref }} | cut -d'/' -f3)" >> $GITHUB_OUTPUT
          cd vcpkg
          echo "vcpkg_sha_short=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT
          echo "cmake_options=-DCMAKE_BUILD_TYPE=RelWithDebInfo -DVCPKG_FILES_DIR=/hpcc-dev -DCPACK_THREADS=0 -DUSE_OPTIONAL=OFF" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create Build Image
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          file: dockerfiles/vcpkg/${{ matrix.os }}.dockerfile
          context: dockerfiles/vcpkg
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/build-${{ matrix.os }}:${{ steps.vars.outputs.branch_name }} 
            ${{ secrets.DOCKER_USERNAME }}/build-${{ matrix.os }}:latest
          cache-from: |
            ${{ secrets.DOCKER_USERNAME }}/build-${{ matrix.os }}:${{ steps.vars.outputs.branch_name }}
            ${{ secrets.DOCKER_USERNAME }}/build-${{ matrix.os }}:latest
          build-args: |
            VCPKG_REF=${{ steps.vars.outputs.vcpkg_sha_short }}
            BUILD_FOLDER=build-${{ matrix.os }}

      - name: CMake Packages
        if: ${{ !matrix.container && !matrix.ln }}
        run: |
          plugins=("CASSANDRAEMBED" "COUCHBASEEMBED" "ECLBLAS" "H3" "JAVAEMBED" "KAFKA" "MEMCACHED" "MYSQLEMBED" "NLP" "REDIS" "SQLITE3EMBED" "SQS" "PLATFORM")
          for plugin in "${plugins[@]}"; do
            sudo rm -f ./build/CMakeCache.txt
            sudo rm -rf ./build/CMakeFiles
            docker_label=${{ secrets.DOCKER_USERNAME }}/build-${{ matrix.os }}:${{ steps.vars.outputs.branch_name }}
            docker run --rm --mount ${{ steps.vars.outputs.mount_platform }} $docker_label "cmake -S /hpcc-dev/HPCC-Platform -B /hpcc-dev/HPCC-Platform/build ${{ steps.vars.outputs.cmake_options }} -D$plugin=ON -DCONTAINERIZED=OFF -DCPACK_STRIP_FILES=OFF" 
            docker run --rm --mount ${{ steps.vars.outputs.mount_platform }} $docker_label "cmake --build /hpcc-dev/HPCC-Platform/build --parallel $(nproc) --target package" 
            docker run --rm --mount ${{ steps.vars.outputs.mount_platform }} $docker_label "cmake -S /hpcc-dev/HPCC-Platform -B /hpcc-dev/HPCC-Platform/build ${{ steps.vars.outputs.cmake_options }} -D$plugin=ON -DCONTAINERIZED=OFF -DCPACK_STRIP_FILES=ON"
            docker run --rm --mount ${{ steps.vars.outputs.mount_platform }} $docker_label "cmake --build /hpcc-dev/HPCC-Platform/build --parallel $(nproc) --target package" 
          done

      - name: CMake Containerized Packages
        if: ${{ matrix.container }}
        run: |
          sudo rm -f ./build/CMakeCache.txt
          sudo rm -rf ./build/CMakeFiles
          docker_label=${{ secrets.DOCKER_USERNAME }}/build-${{ matrix.os }}:${{ steps.vars.outputs.branch_name }}
          docker run --rm --mount ${{ steps.vars.outputs.mount_platform }} $docker_label "cmake -S /hpcc-dev/HPCC-Platform -B /hpcc-dev/HPCC-Platform/build ${{ steps.vars.outputs.cmake_options }} -DINCLUDE_PLUGINS=ON -DCONTAINERIZED=ON -DSUPPRESS_REMBED=ON -DSUPPRESS_V8EMBED=ON -DSUPPRESS_SPARK=ON -DCPACK_STRIP_FILES=OFF"
          docker run --rm --mount ${{ steps.vars.outputs.mount_platform }} $docker_label "cmake --build /hpcc-dev/HPCC-Platform/build --parallel $(nproc) --target package" 
          docker run --rm --mount ${{ steps.vars.outputs.mount_platform }} $docker_label "cmake -S /hpcc-dev/HPCC-Platform -B /hpcc-dev/HPCC-Platform/build ${{ steps.vars.outputs.cmake_options }} -DINCLUDE_PLUGINS=ON -DCONTAINERIZED=ON -DSUPPRESS_REMBED=ON -DSUPPRESS_V8EMBED=ON -DSUPPRESS_SPARK=ON -DCPACK_STRIP_FILES=ON" 
          docker run --rm --mount ${{ steps.vars.outputs.mount_platform }} $docker_label "cmake --build /hpcc-dev/HPCC-Platform/build --parallel $(nproc) --target package" 

      - name: Upload Assets
        uses: ncipollo/release-action@v1.12.0
        if: ${{ !matrix.ln }}
        with:
          allowUpdates: true
          artifacts: "build/*.deb,build/*.rpm"

      - name: Checkout LN
        if: ${{ matrix.ln }}
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/LN
          ref: ${{ github.ref }}
          path: ${{ github.workspace }}/LN
          token: ${{ secrets.LNB_TOKEN }}

      - name: CMake LN Packages
        if: ${{ matrix.ln }}
        run: |
          sudo rm -f ./build/CMakeCache.txt
          sudo rm -rf ./build/CMakeFiles
          docker_label=${{ secrets.DOCKER_USERNAME }}/build-${{ matrix.os }}:${{ steps.vars.outputs.branch_name }}
          docker run --rm --mount ${{ steps.vars.outputs.mount_platform }} --mount ${{ steps.vars.outputs.mount_ln }} $docker_label "cmake -S /hpcc-dev/LN -B /hpcc-dev/HPCC-Platform/build -DHPCC_SOURCE_DIR=/hpcc-dev/HPCC-Platform ${{ steps.vars.outputs.cmake_options }} -DINCLUDE_PLUGINS=ON -DCONTAINERIZED=OFF -DSUPPRESS_REMBED=ON -DSUPPRESS_V8EMBED=ON -DSUPPRESS_SPARK=ON -DCPACK_STRIP_FILES=OFF"
          docker run --rm --mount ${{ steps.vars.outputs.mount_platform }} --mount ${{ steps.vars.outputs.mount_ln }} $docker_label "cmake --build /hpcc-dev/HPCC-Platform/build --parallel $(nproc) --target package" 
          docker run --rm --mount ${{ steps.vars.outputs.mount_platform }} --mount ${{ steps.vars.outputs.mount_ln }} $docker_label "cmake -S /hpcc-dev/LN -B /hpcc-dev/HPCC-Platform/build -DHPCC_SOURCE_DIR=/hpcc-dev/HPCC-Platform ${{ steps.vars.outputs.cmake_options }} -DINCLUDE_PLUGINS=ON -DCONTAINERIZED=OFF -DSUPPRESS_REMBED=ON -DSUPPRESS_V8EMBED=ON -DSUPPRESS_SPARK=ON -DCPACK_STRIP_FILES=ON" 
          docker run --rm --mount ${{ steps.vars.outputs.mount_platform }} --mount ${{ steps.vars.outputs.mount_ln }} $docker_label "cmake --build /hpcc-dev/HPCC-Platform/build --parallel $(nproc) --target package" 

      - name: Upload LN Assets
        if: ${{ matrix.ln }}
        uses: ncipollo/release-action@v1.12.0
        with:
          owner: ${{ secrets.LNB_ACTOR }}
          repo: LN
          token: ${{ secrets.LNB_TOKEN }}
          allowUpdates: true
          artifacts: "build/hpccsystems-platform-internal*.deb,build/hpccsystems-platform-internal*.rpm"

      - name: Upload error logs
        if: ${{ failure() || cancelled() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-${{ matrix.package }}-logs
          path: build/CMakeCache.txt

  build-clienttools:
    needs: release
    strategy:
      matrix:
        include:
          - os: "windows-2022"
            triplet: "x64-windows"
            mono: ""
            sudo: ""
            cmake_config_options: '-G "Visual Studio 17 2022" -T host=x64 -A x64 -DUSE_OPTIONAL=OFF -DCLIENTTOOLS_ONLY=ON -DINCLUDE_PLUGINS=OFF -DUSE_JAVA=OFF -DUSE_LIBMEMCACHED=OFF -DUSE_OPENLDAP=OFF -DUSE_CASSANDRA=OFF -DUSE_AZURE=OFF -DWSSQL_SERVICE=OFF'
            cmake_build_options: "--config Release --parallel $NUMBER_OF_PROCESSORS"
          - os: "macos-12"
            triplet: "x64-osx"
            mono: "mono"
            sudo: "sudo"
            cmake_config_options: "-DCMAKE_BUILD_TYPE=Release -DUSE_OPTIONAL=OFF -DCLIENTTOOLS_ONLY=ON -DINCLUDE_PLUGINS=OFF -DUSE_JAVA=OFF -DUSE_LIBMEMCACHED=OFF -DUSE_OPENLDAP=OFF -DUSE_CASSANDRA=OFF -DUSE_AZURE=OFF -DWSSQL_SERVICE=OFF"
            cmake_build_options: "--parallel $(nproc)"
      fail-fast: false

    name: "Build Client Tools"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Display build summary
        working-directory: .
        shell: "bash"
        run: |
          echo ${{ matrix.os }} ${{ matrix.triplet }}
          echo "Checkout to $Env:GITHUB_WORKSPACE"

      - name: Calculate vars
        id: vars
        shell: "bash"
        run: |
          echo "branch_name=$(echo ${{ github.ref }} | cut -d'/' -f3)" >> $GITHUB_OUTPUT

      - name: OSX Dependencies
        if: ${{ contains(matrix.os, 'macos') }}
        shell: "bash"
        run: |
          brew install bison flex pkg-config autoconf autoconf-archive automake libtool cmake openjdk@11

      - name: "Setup NuGet credentials"
        shell: "bash"
        run: |
          ${{ matrix.mono }} `vcpkg fetch nuget | tail -n 1` \
            sources add \
            -source "https://nuget.pkg.github.com/hpcc-systems/index.json" \
            -storepasswordincleartext \
            -name "GitHub" \
            -username "${{ github.actor }}" \
            -password "${{ secrets.GITHUB_TOKEN }}"

      - name: "Remove builtin vcpkg"
        working-directory: .
        shell: "bash"
        run: |
          ${{ matrix.sudo }} rm -rf "$VCPKG_INSTALLATION_ROOT"

      - name: Check out source code (tag)
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          submodules: recursive

      - name: "vcpkg Bootstrap"
        working-directory: .
        shell: "bash"
        run: |
          ./vcpkg/bootstrap-vcpkg.sh

      - name: "Generate HPCC-Platform Build Files"
        working-directory: .
        shell: "bash"
        run: |
          mkdir build
          cd build
          cmake .. ${{ matrix.cmake_config_options }}

      - name: Bundle
        working-directory: ./build
        shell: "bash"
        run: |
          cmake --build . ${{ matrix.cmake_build_options }} --target package

      - name: Upload Assets
        uses: ncipollo/release-action@v1.12.0
        with:
          allowUpdates: true
          artifacts: "build/*.exe,build/*.msi,build/*.dmg,build/*.pkg,build/*.tar.gz"
