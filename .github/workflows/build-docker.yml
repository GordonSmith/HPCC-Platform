name: Test Build

on:
  workflow_call:
    inputs:
      os:
        type: string
        description: 'Operating System'
        required: false
        default: 'ubuntu-22.04'
      ln:
        type: boolean
        description: 'Internal Build'
        required: false
        default: false
      single-package:
        type: boolean
        description: 'Single Package'
        required: false
        default: true
      containerized:
        type: boolean
        description: 'Containerized Build'
        required: false
        default: false
      strip-files:
        type: boolean
        description: 'Single Package'
        required: false
        default: true
      cmake-configuration:
        type: string
        description: 'CMake Configuration'
        required: false
        default: '-DCMAKE_BUILD_TYPE=RelWithDebInfo -DVCPKG_FILES_DIR=/hpcc-dev -DCPACK_THREADS=0 -DUSE_OPTIONAL=OFF -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache'
      cmake-configuration-ex:
        type: string
        description: 'CMake Configuration Extra'
        required: false
        default: ''
      save-package:
        type: string
        description: 'Save Package as Asset'
        required: false
        default: ''
    secrets:
      LNB_TOKEN:
        required: false

jobs:

  build-docker:
    runs-on: ubuntu-22.04
    steps:
      - name: Free additional disk space (remove Android SDK + Tools)
        run: |
          sudo rm -rf /usr/local/lib/android

      - name: Checkout HPCC-Platform
        uses: actions/checkout@v3
        with:
          submodules: recursive
          path: ${{ github.workspace }}/HPCC-Platform

      - name: Checkout LN
        if: ${{ inputs.ln == true }}
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/LN
          token: ${{ secrets.LNB_TOKEN }}
          ref: ${{ github.base_ref }}
          submodules: recursive
          path: ${{ github.workspace }}/LN

      - name: Calculate vars
        id: vars
        working-directory: ${{ github.workspace }}/HPCC-Platform/vcpkg
        run: |
          vcpkg_sha_short=$(git rev-parse --short=8 HEAD)
          echo "vcpkg_sha_short=$vcpkg_sha_short" >> $GITHUB_OUTPUT
          docker_build_label=hpccsystems/platform-build-${{ inputs.os }}
          community_ref=${{ github.ref }}
          community_tag=$(echo $community_ref | cut -d'/' -f3)
          candidate_base_branch=${{ github.base_ref }}
          echo "docker_tag=$docker_build_label:$vcpkg_sha_short" >> $GITHUB_OUTPUT
          echo "docker_tag_candidate_base=$docker_build_label:${candidate_base_branch:-$community_tag}" >> $GITHUB_OUTPUT

      - name: Print vars
        run: |
          echo "${{ toJSON(steps.vars.outputs) }}"

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Pull previous images
        run: |
          docker pull ${{ steps.vars.outputs.docker_tag_candidate_base }} || true
          docker pull ${{ steps.vars.outputs.docker_tag }} || true

      - name: Create Build Image  
        uses: docker/build-push-action@v4
        with:
          builder: ${{ steps.buildx.outputs.name }}
          file: ${{ github.workspace }}/HPCC-Platform/dockerfiles/vcpkg/${{ inputs.os }}.dockerfile
          context: ${{ github.workspace }}/HPCC-Platform/dockerfiles/vcpkg
          load: true
          build-args: |
            VCPKG_REF=${{ steps.vars.outputs.vcpkg_sha_short }}
          tags: |
            ${{ steps.vars.outputs.docker_tag_candidate_base }}
          cache-from: |
            type=registry,ref=${{ steps.vars.outputs.docker_tag_candidate_base }}
            type=registry,ref=${{ steps.vars.outputs.docker_tag }}
          cache-to: type=inline

      - uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ inputs.os }}-${{ inputs.containerized == true && 'k8s' || 'bare-metal' }}-${{ inputs.ln == true && 'LN' || 'HPCC-Platform' }}
          restore-keys:
            ${{ inputs.os }}-${{ inputs.containerized == true && 'k8s' || 'bare-metal' }}-
            ${{ inputs.os }}-

      - name: CMake Packages
        run: |
          mkdir -p ${{ github.workspace }}/LN
          mkdir -p ${{ github.workspace }}/build
          mkdir -p ${{ github.workspace }}/.ccache
          declare -a plugins
          if [ ${{ inputs.single-package }} ]; then
            plugins=("PLATFORM")
          else
            plugins=("CASSANDRAEMBED" "COUCHBASEEMBED" "ECLBLAS" "H3" "JAVAEMBED" "KAFKA" "MEMCACHED" "MONGODBEMBED" "MYSQLEMBED" "NLP" "PARQUETEMBED" "REDIS" "REMBED" "SQLITE3EMBED" "SQS" "PLATFORM")
          fi
          for plugin in "${plugins[@]}"; do
            sudo rm -f ${{ github.workspace }}/build/CMakeCache.txt
            sudo rm -rf ${{ github.workspace }}/build/CMakeFiles
            docker run --rm \
              --mount source="${{ github.workspace }}/HPCC-Platform",target=/hpcc-dev/HPCC-Platform,type=bind,consistency=cached \
              --mount source="${{ github.workspace }}/LN",target=/hpcc-dev/LN,type=bind,consistency=cached \
              --mount source="${{ github.workspace }}/build",target=/hpcc-dev/build,type=bind,consistency=cached \
              --mount source="${{ github.workspace }}/.ccache",target=/root/.ccache,type=bind,consistency=cached \
              ${{ steps.vars.outputs.docker_tag_candidate_base }} "\
              cmake -G Ninja -S /hpcc-dev/${{ inputs.ln == true && 'LN' || 'HPCC-Platform' }} -B /hpcc-dev/build -DHPCC_SOURCE_DIR=/hpcc-dev/HPCC-Platform -DCONTAINERIZED=${{ inputs.containerized == true && 'ON' || 'OFF' }} -DCPACK_STRIP_FILES=${{ inputs.strip-files == true && 'ON' || 'OFF' }} ${{ inputs.cmake-configuration }} ${{ inputs.cmake-configuration-ex }} -D$plugin=ON && \
              cmake --build /hpcc-dev/build --parallel ${{ inputs.save-package != '' && '--target package'}}" 
          done

      - name: Upload package
        if: ${{ inputs.save-package != '' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.save-package }}
          path: |
            ${{ github.workspace }}/build/*.deb
            ${{ github.workspace }}/build/*.rpm
          if-no-files-found: error

      - name: Upload error logs
        if: ${{ failure() || cancelled() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.os }}-${{ inputs.ln == true && 'LN' || 'HPCC-Platform' }}-logs
          path: ${{ github.workspace }}/build/**/*.log
