name: build-vcpkg

env:
  VCPKG_BINARY_SOURCES: "clear;nuget,GitHub,read"
  VCPKG_NUGET_REPOSITORY: "https://github.com/hpcc-systems/vcpkg"

on:
  push:
    branches:
      - "newbuild"
    tags:
      - "newbuild_*"
      - "community_*"
      - "!community_8.10.*"
      - "!community_8.8.*"
      - "!community_8.6.*"
      - "!community_8.4.*"
      - "!community_8.2.*"
      - "!community_8.0.*"
      - "!community_7.*"
  pull_request:
    branches:
      - "master"
      - "newbuild"
      - "candidate-*"
      - "!candidate-7.10.*"
      - "!candidate-7.8.*"
      - "!candidate-7.6.*"
      - "!candidate-7.4.*"
      - "!candidate-7.2.*"
      - "!candidate-7.0.*"
      - "!candidate-6.*"
  schedule:
    - cron: "0 0 * * *"

jobs:
  check-skip:
    runs-on: ubuntu-20.04
    outputs:
      platform: ${{ steps.skip_check.outputs.platform }}
    steps:
      - id: skip_check
        uses: hpcc-systems/github-actions/changed-modules@main
        with:
          github_token: ${{ github.token }}

  build:
    strategy:
      matrix:
        os:
          [
            "ubuntu-18.04",
            "ubuntu-20.04",
            "ubuntu-22.04",
            "windows-2019",
            "windows-2022",
            "macos-11",
            "macos-12",
          ]
        include:
          - os: "ubuntu-18.04"
            triplet: "x64-linux"
            mono: "mono"
            sudo: "sudo"
            cmake_config_options: "-DCMAKE_BUILD_TYPE=Release -DINCLUDE_PLUGINS=ON -DSUPPRESS_V8EMBED=ON -DSUPPRESS_REMBED=ON"
            cmake_build_options: "-- -j$(nproc) -k"
            event_name: "pull_request, push, schedule"
          - os: "ubuntu-20.04"
            triplet: "x64-linux"
            mono: "mono"
            sudo: "sudo"
            cmake_config_options: "-DCMAKE_BUILD_TYPE=Release -DINCLUDE_PLUGINS=ON -DSUPPRESS_V8EMBED=ON -DSUPPRESS_REMBED=ON"
            cmake_build_options: "-- -j$(nproc) -k"
            event_name: "pull_request, push, schedule"
          - os: "ubuntu-22.04"
            triplet: "x64-linux"
            mono: "mono"
            sudo: "sudo"
            cmake_config_options: "-DCMAKE_BUILD_TYPE=Release -DINCLUDE_PLUGINS=ON -DSUPPRESS_V8EMBED=ON -DSUPPRESS_REMBED=ON"
            cmake_build_options: "-- -j$(nproc) -k"
            event_name: "pull_request, push, schedule"
          - os: "windows-2019"
            triplet: "x64-windows"
            mono: ""
            sudo: ""
            cmake_config_options: '-G "Visual Studio 16 2019" -T host=x64 -A x64 -DUSE_OPENLDAP=OFF -DUSE_CASSANDRA=OFF -DUSE_AZURE=OFF -DWSSQL_SERVICE=OFF -DINCLUDE_PLUGINS=OFF'
            cmake_build_options: "--config Release -j2 -- -m"
            event_name: "pull_request, push, schedule"
          - os: "windows-2022"
            triplet: "x64-windows"
            mono: ""
            sudo: ""
            cmake_config_options: '-G "Visual Studio 17 2022" -T host=x64 -A x64 -DUSE_OPENLDAP=OFF -DUSE_CASSANDRA=OFF -DUSE_AZURE=OFF -DWSSQL_SERVICE=OFF -DINCLUDE_PLUGINS=OFF'
            cmake_build_options: "--config Release -j2 -- -m"
            event_name: "pull_request, push, schedule"
          - os: "macos-11"
            triplet: "x64-osx"
            mono: "mono"
            sudo: "sudo"
            cmake_config_options: "-DCMAKE_BUILD_TYPE=Release -DINCLUDE_PLUGINS=ON -DSUPPRESS_V8EMBED=ON -DSUPPRESS_REMBED=ON -DSUPPRESS_MEMCACHED=ON -DSUPPRESS_MONGODBEMBED=ON -DUSE_JAVA=OFF"
            cmake_build_options: "-- -j$(nproc) -k"
            event_name: "pull_request, push, schedule"
          - os: "macos-12"
            triplet: "x64-osx"
            mono: "mono"
            sudo: "sudo"
            cmake_config_options: "-DCMAKE_BUILD_TYPE=Release -DINCLUDE_PLUGINS=ON -DSUPPRESS_V8EMBED=ON -DSUPPRESS_REMBED=ON -DSUPPRESS_MEMCACHED=ON -DSUPPRESS_MONGODBEMBED=ON -DUSE_JAVA=OFF"
            cmake_build_options: "-- -j$(nproc) -k"
            event_name: "pull_request, push, schedule"
      fail-fast: false

    name: "Build with vcpkg"
    needs: check-skip
    if: github.repository == 'hpcc-systems/HPCC-Platform'
    runs-on: ${{ matrix.os }}
    steps:
      - name: Display build summary
        working-directory: .
        run: |
          echo ${{ matrix.os }} ${{ matrix.triplet }}
          echo "Checkout to $Env:GITHUB_WORKSPACE"
          echo "Platform Changed:  ${{ needs.check-skip.outputs.platform }}"

      - name: Ubuntu Dependencies
        if: ${{ contains(matrix.event_name, github.event_name) && needs.check-skip.outputs.platform && contains(matrix.os, 'ubuntu') }}
        shell: "bash"
        run: |
          sudo apt-get update -y
          sudo apt-get install -yq --no-install-recommends \
          apt-transport-https \
          autoconf \
          autoconf-archive \
          automake \
          autotools-dev \
          binutils-dev \
          bison \
          build-essential \
          ca-certificates \
          curl \
          dirmngr \
          flex \
          git \
          gnupg \
          groff-base \
          libtool \
          pkg-config \
          software-properties-common \
          tar \
          unzip \
          uuid-dev \
          zip

      - name: Ubuntu Mono Dependencies
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        shell: "bash"
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
          echo "deb https://download.mono-project.com/repo/ubuntu stable-focal main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
          sudo apt-get update -y
          sudo apt-get -yq install -f mono-complete

      - name: OSX Dependencies
        if: ${{ contains(matrix.event_name, github.event_name) && needs.check-skip.outputs.platform && contains(matrix.os, 'macos') }}
        shell: "bash"
        run: |
          brew install bison flex pkg-config autoconf autoconf-archive automake libtool cmake openjdk@11

      - name: "Setup NuGet credentials"
        if: ${{ contains(matrix.event_name, github.event_name) && needs.check-skip.outputs.platform }}
        shell: "bash"
        run: |
          ${{ matrix.mono }} `vcpkg fetch nuget | tail -n 1` \
            sources add \
            -source "https://nuget.pkg.github.com/hpcc-systems/index.json" \
            -storepasswordincleartext \
            -name "GitHub" \
            -username "${{ github.actor }}" \
            -password "${{ secrets.GITHUB_TOKEN }}"

      - name: "Remove builtin vcpkg"
        if: ${{ contains(matrix.event_name, github.event_name) && needs.check-skip.outputs.platform }}
        working-directory: .
        shell: "bash"
        run: |
          ${{ matrix.sudo }} rm -rf "$VCPKG_INSTALLATION_ROOT"

      - name: Check out source code
        if: ${{ contains(matrix.event_name, github.event_name) && needs.check-skip.outputs.platform }}
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: "vcpkg Bootstrap"
        if: ${{ contains(matrix.event_name, github.event_name) && needs.check-skip.outputs.platform }}
        working-directory: .
        shell: "bash"
        run: |
          ./vcpkg/bootstrap-vcpkg.sh

      - name: "Generate HPCC-Platform Build Files"
        if: ${{ contains(matrix.event_name, github.event_name) && needs.check-skip.outputs.platform }}
        working-directory: .
        shell: "bash"
        run: |
          mkdir build
          cd build
          cmake .. -DSKIP_ECLWATCH=ON -DCONTAINERIZED=OFF -DUSE_OPTIONAL=OFF ${{ matrix.cmake_config_options }}

      - name: "Remove vcpkg build files"
        if: ${{ contains(matrix.event_name, github.event_name) && needs.check-skip.outputs.platform }}
        working-directory: ./vcpkg
        shell: "bash"
        run: |
          rm -rf ./buildtrees
          rm -rf ./downloads

      - name: "Build HPCC-Platform"
        if: ${{ contains(matrix.event_name, github.event_name) && needs.check-skip.outputs.platform }}
        working-directory: ./build
        shell: "bash"
        run: |
          cmake --build . ${{ matrix.cmake_build_options }}

      - name: "Build HPCC-Platform"
        if: ${{ contains(matrix.event_name, github.event_name) && needs.check-skip.outputs.platform }}
        working-directory: ./build
        shell: "bash"
        run: |
          cmake --build . ${{ matrix.cmake_build_options }}

      - name: Bundle Package  
        if: github.event_name == 'push' && github.ref == 'refs/tags/*'
        shell: "bash"
        run: |
          cmake --build . --target package ${{ matrix.cmake_build_options }}

      - name: Attach build artifacts
        if: github.event_name == 'push' && github.ref == 'refs/tags/*'
        uses: actions/upload-artifact@v3
        with:
          path: |
            /hpcc-dev/HPCC-Platform/build/*.deb
            /hpcc-dev/HPCC-Platform/build/*.rpm
            /hpcc-dev/HPCC-Platform/build/*.exe
            /hpcc-dev/HPCC-Platform/build/*.msi
            /hpcc-dev/HPCC-Platform/build/*.dmg
            /hpcc-dev/HPCC-Platform/build/*.pkg
            
  build-docker:
    strategy:
      matrix:
        os:
          [
            "ubuntu-22.04",
            "ubuntu-20.04",
            "ubuntu-18.04",
            "centos-8",
            "centos-7",
          ]
        include:
          - os: "ubuntu-22.04"
            event_name: "pull_request, push, schedule"
          - os: "ubuntu-20.04"
            event_name: "pull_request, push, schedule"
          - os: "ubuntu-18.04"
            event_name: "pull_request, push, schedule"
          - os: "centos-8"
            event_name: "pull_request, push, schedule"
          - os: "centos-7"
            event_name: "pull_request, push, schedule"
      fail-fast: false

    name: "Build with docker + vcpkg"
    needs: check-skip
    runs-on: ubuntu-22.04
    steps:
      - name: Info
        run: |
          echo "matrix.event_name:  ${{ matrix.event_name }}"
          echo "github.event_name:  ${{ github.event_name }}"
          echo "needs.check-skip.outputs.platform:  ${{ needs.check-skip.outputs.platform }}"

      - name: Checkout PR
        if: ${{ contains(matrix.event_name, github.event_name) && needs.check-skip.outputs.platform }}
        uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - name: Calculate vars
        if: ${{ contains(matrix.event_name, github.event_name) && needs.check-skip.outputs.platform }}
        id: vars
        run: |
          echo "branch_name=$(echo ${{ github.ref }} | cut -d'/' -f3)" >> $GITHUB_OUTPUT
          cd vcpkg
          echo "vcpkg_sha_short=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        if: ${{ contains(matrix.event_name, github.event_name) && needs.check-skip.outputs.platform }}
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        if: ${{ contains(matrix.event_name, github.event_name) && needs.check-skip.outputs.platform }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create Build Image  
        if: ${{ contains(matrix.event_name, github.event_name) && needs.check-skip.outputs.platform }}
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          file: dockerfiles/vcpkg/${{ matrix.os}}.dockerfile
          context: dockerfiles/vcpkg
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/build-${{ matrix.os }}:${{ steps.vars.outputs.branch_name }} 
            ${{ secrets.DOCKER_USERNAME }}/build-${{ matrix.os }}:latest
          cache-from: |
            ${{ secrets.DOCKER_USERNAME }}/build-${{ matrix.os }}:${{ steps.vars.outputs.branch_name }} 
            ${{ secrets.DOCKER_USERNAME }}/build-${{ matrix.os }}:latest
          build-args: |
            VCPKG_REF=${{ steps.vars.outputs.vcpkg_sha_short }}
            BUILD_FOLDER=build-${{ matrix.os }}

      - name: Generate CMake Configuration  
        if: ${{ contains(matrix.event_name, github.event_name) && needs.check-skip.outputs.platform }}
        run: |
          docker run --rm -v "$(pwd)":/hpcc-dev/HPCC-Platform ${{ secrets.DOCKER_USERNAME }}/build-${{ matrix.os }}:${{ steps.vars.outputs.branch_name }} "cmake -S /hpcc-dev/HPCC-Platform -B /hpcc-dev/HPCC-Platform/build \${CMAKE_OPTIONS}"

      - name: Build Platform  
        if: ${{ contains(matrix.event_name, github.event_name) && needs.check-skip.outputs.platform }}
        run: |
          docker run --rm -v "$(pwd)":/hpcc-dev/HPCC-Platform ${{ secrets.DOCKER_USERNAME }}/build-${{ matrix.os }}:${{ steps.vars.outputs.branch_name }} "cmake --build /hpcc-dev/HPCC-Platform/build --parallel $(nproc)"

      - name: Bundle Package  
        if: github.event_name == 'push' && github.ref == 'refs/tags/*'
        run: |
          docker run --rm -v "$(pwd)":/hpcc-dev/HPCC-Platform ${{ secrets.DOCKER_USERNAME }}/build-${{ matrix.os }}:${{ steps.vars.outputs.branch_name }} "cmake --build /hpcc-dev/HPCC-Platform/build --parallel $(nproc) --target package"

      - name: Attach build artifacts
        if: github.event_name == 'push' && github.ref == 'refs/tags/*'
        uses: actions/upload-artifact@v3
        with:
          path: |
            /hpcc-dev/HPCC-Platform/build/*.deb
            /hpcc-dev/HPCC-Platform/build/*.rpm
            